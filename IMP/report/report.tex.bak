\documentclass[conference,compsoc]{IEEEtran}
\usepackage{CJK}
\ifCLASSOPTIONcompsoc
  \usepackage[nocompress]{cite}
\else
  \usepackage{cite}
\fi
\ifCLASSINFOpdf
\else
\fi
\usepackage{amsmath}
\usepackage{algorithm}
\usepackage{algorithmicx}
\usepackage{algpseudocode}
\usepackage{booktabs}
\renewcommand{\algorithmicrequire}{\textbf{Input:}}
\renewcommand{\algorithmicensure}{\textbf{Output:}}
\usepackage{url}
\hyphenation{op-tical net-works semi-conduc-tor}
\begin{document}
\title{Influence Maximization Problems(IMP)}
\author{\IEEEauthorblockN{Peijun Ruan  11610214}\\
\IEEEauthorblockA{School of Computer Science and Engineering\\
Southern University of Science and Technology\\
Email: 11610214@mail.sustc.edu.cn}}
\maketitle
\IEEEpeerreviewmaketitle
\section{Preliminaries}
\subsection{Introduction}
Influence maximization problem was raised to study the influence among members in social network.A piece of message could quickly become pervasive through the "word-of-mouth" propagation among the familiar people in the social network.This kind of phenomenon is very powerful in many applications like adoption of political standpoints[1] .This problem can be described as find a subset of nodes \textbf{S} in a social network \textbf{G} that could maximize the expected spread of influence \textbf{$\sigma(S)$}, and the spread of influence \textbf{$\sigma(S)$} is the nodes that can be activated by \textbf{S} after a diffusion model ends. The most commonly used diffusion models are Independent Cascade model (\textbf{IC}) and Linear Threshold Model (\textbf{LT}).
This problem has already been proved to be NP-hard, so the target of IMP is to find a approximately optimal solution(a node set \textbf{S} ).
\subsection{Software}
This project is written in Python 3.6 using IDE Pycharm.The library used including sys,getopt,random,time,numpy and copy.
\subsection{Algorithm}
The algorithm implemented in this project is a improved CELF algorithm which was proposed in [2].
\section{Methodology}
This project contains two part, the first part is to calculate the spread of influence for a given node set and a network in two models.The second is to find a optimal node set for a given network.
\subsection{Representation}
In both two parts, the network is a directed graph $G = (V,E)$ where $V$ notes the node set and $E$ notes the edge set.Each edge $(u,v)$ in $E$ has a weight $w$ represent the probability that $u$ activates $v$ and $w \in [0,1]$.

So there are two main things we need to represent in algorithms.
\begin{itemize}
    \item network $G$: a two-dimensional numpy array,store the edge and its weight in the graph.
    \item seed\_set $S$: a list storing the result node set or the original given node set.
\end{itemize}

And in the implementation of algorithm, there are one important data that needs to store.
\begin{itemize}
    \item mgset: a set store the index of nodes,which are the nodes activated by one node.
\end{itemize}
\subsection{Functions}
Here shows the main function I implement in this project.
\quad \\
\quad \\
For ISE.py
\begin{itemize}
    \item get\_input: get the input from Terminal and store the given data in data structures.
    \item build\_graph: read the given file and build the corresponding graph.
    \item IC\_model: the implementation of independent cascade model.
    \item LT\_model: the implementation of linear threshold model.
    \item get\_weight: calculate the total weight for incoming edges of given node.
\end{itemize}
\quad \\
For IMP.py
\begin{itemize}
     \item get\_input: get the input from Terminal and store the given data in data structures.
    \item build\_graph: read the given file and build the corresponding graph.
    \item IC\_model: the implementation of independent cascade model.
    \item LT\_model: the implementation of linear threshold model.
     \item get\_weight: calculate the total weight for incoming edges of given node.
    \item getInfluence: using specific model according to the Terminal input.
    \item Lv\_CELF:the main algorithm to maintain the seeds for given network.
\end{itemize}
\subsection{Detail of Algorithm}
Here shows the psudocode of the main algorithms.

\begin{algorithm}
    \caption{IC\_model}
    \begin{algorithmic}[1]
        \Require $network \ G, seed \ set \ S$
        \Ensure $activated \ set \ A$\\
         $V_{new}=S$\\
         $V_{ans}=\phi$
         \While{$V_{new}\neq\phi$}
                \State $V_{temp}=\phi$
                \For{each node i in $V_{new}$}
                    \For{each not active neighbor j of i}
                        \State try to activate j
                        \If{j is activated}
                            \State $V_{temp}=V_{temp}\cup{j}$
                        \EndIf
                    \EndFor
                \EndFor
                \State $V_{new}=V_{temp}$
                \State $V_{ans}=V_{ans}\cup V_{temp}$
         \EndWhile\\
         \Return $V_{ans}$
    \end{algorithmic}
\end{algorithm}

\begin{algorithm}
    \caption{LT\_model}
    \begin{algorithmic}[1]
        \Require $network \ G, seed \ set \ S$
        \Ensure $activated \ set \ A$\\
         $V_{new}=S$\\
         $V_{ans}=\phi$\\
         give a random threshold for all node in G
         \While{$V_{new}\neq\phi$}
                \State $V_{temp}=\phi$
                \For{each node i in $V_{new}$}
                    \For{each not active neighbor j of i}
                        \State calculate weight of j,try to activate j
                        \If{j is activated}
                            \State $V_{temp}=V_{temp}\cup{j}$
                        \EndIf
                    \EndFor
                \EndFor
                \State $V_{new}=V_{temp}$
                \State $V_{ans}=V_{ans}\cup V_{temp}$
         \EndWhile\\
         \Return $V_{ans}$
    \end{algorithmic}
\end{algorithm}

\begin{algorithm}
    \caption{Lv\_CELF}
    \begin{algorithmic}[1]
        \Require $network \ G, seed \ size \ K$
        \Ensure $seed \ set \ S$
        \State $V_{ans}=\phi$
        \State $Q=\phi$
        \For{each node u in G}
            \State u.mgset=getInfluence(G,{u})
            \State u.mg=$|$u.mgset$|$
            \State u.flag=0
            \State add u to Q
        \EndFor
        \State sort Q by mg in descending order.
        \While{$|V_{ans}|$<K and $|Q|$>0}
            \State u=Q[top]
            \If{u.flag == $|V_{ans}|$ }
                \State $V_{ans} = V_{ans} \cup {u}$
                \State Q=Q-u.mgset
            \Else
                \State u.mgset=getInfluence(G,$V_{ans}$+{u})-getInfluence(G,$V_{ans}$)
                \State u.mg=$|u.mgset|$
                \State u.flag=$|V_{ans}|$
                \State resort Q by mg in descending order.
            \EndIf
        \EndWhile
        \Return $V_{ans}$
    \end{algorithmic}
\end{algorithm}
\section{Empirical Verification}
Since we have only one test network example, there is little I can do to for the empirical verification. Fortunately the result of test is obvious and easy to explain.
\subsection{Design}
To show the usability and improvement of this algorithm, I implement a general greedy algorithm for IMP to compare the result and running time.I choose two seed sizes and use both two model to get the result.
\subsection{Data}
Data used in this test is the small network given on the sakai which contains 62 nodes and 159 edges.
\subsection{Hyperparameters}
In ISE:\\
IC/LT model calculation times:10000\\

In IMP:\\
Total loop for result:500\\
IC/LT model calculation time for \textbf{mgset} of each node:1 \\
\subsection{Result}

\subsubsection{model=LT seed\_size=4}
\quad \\

Lv\_CELF: \\
seeds = 58 52 28 62\\
time cost = 0.0259s\\
spread of influence: IC 25.5052  LT 29.2557\\

normal greedy:\\
seeds = 56 8 58 32\\
time cost = 0.6244s\\
spread of influence: IC 21.0879 LT 23.4523

\subsubsection{model=IC seed\_size=4}
\quad \\

Lv\_CELF:\\
seeds = 56 58 48 53\\
time cost = 0.0197s\\
spread of influence: IC 26.9789  LT 32.7696\\

normal greedy:\\
seeds = 56 57 2 54\\
time cost = 0.2575s\\
spread of influence: IC 16.0074 LT 17.5406

\subsubsection{model=LT seed\_size=8}
\quad \\

Lv\_CELF:\\
seeds = 41 47 48 52 53 56 58 28\\
 time cost = 0.0405s\\
spread of influence: IC 32.5524  LT 39.7248\\

normal greedy:\\
seeds = 4 60 48 52 23 58 28 30\\
 time cost = 1.5897s\\
spread of influence: IC 30.047 LT 36.9852

\subsubsection{model=IC seed\_size=8}
\quad \\

Lv\_CELF:\\
seeds = 32 45 28 48 52 56 58 60\\
time cost = 0.0337s\\
spread of influence: IC 31.7086  LT 38.9769\\

normal greedy:\\
seeds = 40 60 50 20 52 54 58 28\\
time cost = 0.9692s\\
spread of influence: IC 29.6898 LT 35.4652

\subsection{Analysis}
From the above result we can easily figure out that the improved CELF algorithm is much faster and more reliable than normal greedy algorithm. The time cost improvement even reaches 96.5\%! Besides, the quality of Lv\_CELF is also nice.

And we can find that as the seed size grow, the improvement of time cost gets more obvious,which shows the improved CELF algorithm can deal more complex and larger scale data set than normal greedy algorithm.











\bibliographystyle{IEEEtran}

\begin{thebibliography}{1}
\bibitem{reference}
Li Y, Fan J, Wang Y, et al. Influence Maximization on Social Graphs: A Survey[J]. IEEE Transactions on Knowledge \& Data Engineering, 2018, PP(99):1-1.
\bibitem{reference}
Lv, J., Guo, J., Yang, Z., Zhang, W., \& Jocshi, A. (2014). Improved Algorithms OF CELF and CELF++ for Influence Maximization. Journal Of Engineering Science And Technology Review, 7(3), 32-38. doi: 10.25103/jestr.073.05
\bibitem{reference}
Kempe, D. , Kleinberg, J. , \& Tardos, ¨¦va. (2003). [acm press the ninth acm sigkdd international conference - washington, d.c. (2003.08.24-2003.08.27)] proceedings of the ninth acm sigkdd international conference on knowledge discovery and data mining, - kdd \"03 - maximizing the spread of influence through a social network. 137.
\bibitem{reference}
Goyal, A., Lu, W., \& Lakshmanan, L. V. (2011, March). Celf++: optimizing the greedy algorithm for influence maximization in social networks. In Proceedings of the 20th international conference companion on World wide web (pp. 47-48). ACM.

\end{thebibliography}


\end{document}


