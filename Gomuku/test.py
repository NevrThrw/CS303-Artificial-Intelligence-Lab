import numpy as np
import re
import gobang
import imp

col = {1: '@', -1: '*', 0: '-'}


def print_chessboard(chessboard):
    new = np.zeros((15, 15), dtype=np.str)
    for i in range(15):
        for j in range(15):
            if chessboard[i][j] == 0:
                new[i][j] = '-'
            if chessboard[i][j] == 1:
                new[i][j] = '@'
            elif chessboard[i][j] == -1:
                new[i][j] = '*'

    print(new)


chessboard = np.zeros((15, 15), dtype=np.int)

ai = imp.load_source('AI', 'gobang.py').AI(15, -1, 1)
ai_2 = imp.load_source('AI', 'gobang.py').AI(15, 1, 1)
step = 1
# a = np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#               [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0],
#               [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0],
#               [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0],
#               [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#               [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])
# ai.go(a)
# print(ai.candidate_list[-1])
while True:
    x, y, color = input().split(',')
    x = int(x)
    y = int(y)
    color = int(color)
    print('######################  {},step{}  ##############'.format(col.get(color), step))
    print_chessboard(chessboard)
    print((x, y))
    if color == -1:
        ai.go(chessboard)
        print(ai.candidate_list[-1])
    else:
        ai_2.go(chessboard)
        print(ai_2.candidate_list[-1])
    chessboard[x][y] = color
    step += 1
    # print('attack_list')
    # attack_score = ai.count_score(chessboard, (x, y), 15, color)
    # print('defenf_list')
    # defend_score = ai.count_score(chessboard, (x, y), 15, -color)
    # print(x, y, color)
    # print('attack_score {}'.format(attack_score))
    # print('defend_score {}'.format(defend_score))

# b = np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#               [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
#               [0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0],
#               [0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0],
#               [0, 1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 3, 2, 1, 0],
#               [0, 1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 3, 2, 1, 0],
#               [0, 1, 2, 3, 4, 5, 6, 6, 6, 5, 4, 3, 2, 1, 0],
#               [0, 1, 2, 3, 4, 5, 6, 7, 6, 5, 4, 3, 2, 1, 0],
#               [0, 1, 2, 3, 4, 5, 6, 6, 6, 5, 4, 3, 2, 1, 0],
#               [0, 1, 2, 3, 4, 5, 6, 6, 6, 5, 4, 3, 2, 1, 0],
#               [0, 1, 2, 3, 4, 5, 6, 6, 6, 5, 4, 3, 2, 1, 0],
#               [0, 1, 2, 3, 4, 5, 6, 6, 6, 5, 4, 3, 2, 1, 0],
#               [0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0],
#               [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
#               [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])
#
# temp = b - a
# print(temp)
# pattern = [r'11111',  # 成五，胜利
#            r'011110',  # 活四，必胜
#            r'0111010', r'0110110', r'0111010', r'0101110',  # 跳活四
#            r'2111010', r'0111012', r'2110110', r'0110112', r'2101110', r'0101112', r'211110', '011112',  # 跳冲四
#            r'2111012', r'2111012', r'2110112', r'2110112', r'2101112', r'2101112', r'2111102', r'2011112',  # 跳死四
#            r'0011100', r'010110', r'011010',  # 双活三
#            r'0011102', r'2011100',  # 活三
#            r'0110102', r'2010110', r'0101102', r'2011010',  # 跳活三
#            r'211100', r'001112', r'211010', r'210110', r'011012', r'010112', r'10011', r'10101', r'11001', r'2011102',
#            # 眠三
#            r'001100', r'0010100',  # 双活二
#            r'01100', r'00110', r'01010', r'010010',  # 活二
#            r'21100', r'210100', r'00112', r'001012', r'210010', r'010012', r'2010102',  # 眠二
#            r'00100', r'00100',  # 活一
#            r'20100', r'00102',  # 跳活一
#            r'2100', r'0012'  # 眠一
#            ]
#
# # 棋型得分
# pattern_score = [99999,
#                  99999,
#                  30000, 30000, 30000, 30000,
#                  10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000,
#                  5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000,
#                  3500, 3500, 3500,
#                  2500, 2500,
#                  1500, 1500, 1500, 1500,
#                  750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750,
#                  300, 300,
#                  150, 150, 150, 150,
#                  50, 50, 50, 50, 50, 50, 50,
#                  20, 20,
#                  10, 10,
#                  5, 5
#                  ]
